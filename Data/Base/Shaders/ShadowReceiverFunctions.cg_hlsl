// Copyright (C) NeoAxis Group Ltd. This is part of NeoAxis 3D Engine SDK.

//First of all remember, shadow maps is must be calibrated for each game.
//Because the shadow map technology is usually whimsical and has artefacts in some cases,
//which cannot be eliminated by the common decision.

float3 fixFlippedCubemapCoords(float3 coord)
{
	return float3(-coord.y, coord.z, coord.x);
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//Directional and Spot lights
///////////////////////////////////////////////////////////////////////////////////////////////////

#if defined(LIGHTTYPE_DIRECTIONAL) || defined(LIGHTTYPE_SPOT)

half getShadowValueSimple(sampler2D shadowMap, float4 shadowUV, float lightShadowFarClipDistance,
	float shadowTextureSize)
{
	float compareDepth = shadowUV.z / lightShadowFarClipDistance;
	
#if defined(ATI_HARDWARE_SHADOWS)

	float2 shadowUVScaled = shadowUV.xy / shadowUV.w;

	float2 lerps = frac( shadowUVScaled.xy * shadowTextureSize );
	//fetch4
	float4 depths = tex2Dproj( shadowMap, shadowUV );

	float4 depthFlags = step( depths, compareDepth );

	return lerp(
		lerp( depthFlags[3], depthFlags[0], lerps.x ), 
		lerp( depthFlags[1], depthFlags[2], lerps.x ), 
		lerps.y );

#elif defined(NVIDIA_HARDWARE_SHADOWS)

	return 1.0f - tex2Dproj( shadowMap, shadowUV ).r;
	
#else

	float depth = tex2Dproj( shadowMap, shadowUV ).r;
	float depthFlag = step( depth, compareDepth );
	return (half)depthFlag;
	
#endif

}

half getShadowValuePCF4x4(sampler2D shadowMap, float4 shadowUV, float lightShadowFarClipDistance, 
	float shadowTextureSize)
{
	float compareDepth = shadowUV.z / lightShadowFarClipDistance;
	float2 shadowUVScaled = shadowUV.xy / shadowUV.w;

#if defined(ATI_HARDWARE_SHADOWS)

	const float scale = .5f * .99f / shadowTextureSize;

	const float2 offsets[4] =
	{
		float2( -1, -1 ),
		float2(  1, -1 ),
		float2( -1,  1 ),
		float2(  1,  1 )
	};

	half shadow = 0;
	for(int n = 0; n < 4; n++)
	{
		float2 texCoord = shadowUVScaled.xy + offsets[n] * scale;

		float2 lerps = frac(texCoord * shadowTextureSize);

		float4 depths = tex2D(shadowMap, texCoord);
		float4 depthFlags = step(depths, compareDepth);
		
		shadow += lerp(
			lerp(depthFlags[3], depthFlags[0], lerps.x), 
			lerp(depthFlags[1], depthFlags[2], lerps.x), 
			lerps.y);

	}
	return shadow / 4;


#elif defined(NVIDIA_HARDWARE_SHADOWS)

	float scale = .5f / shadowTextureSize;

	const float2 offsets[4] =
	{
		float2( -1, -1 ),
		float2(  1, -1 ),
		float2( -1,  1 ),
		float2(  1,  1 )
	};
	
	half shadow = 0;
	for(int n = 0; n < 4; n++)
	{
		float4 texCoord = shadowUV;
		texCoord.xy += offsets[n] * ( scale * shadowUV.w );
		
		shadow += tex2Dproj( shadowMap, texCoord ).r;
	}
	return 1.0h - shadow / 4;
	

#else

	//2x2 filter
	
	//transform to texel space
	float2 texelPos = shadowTextureSize * shadowUVScaled.xy;
	//determine the lerp amounts
	float2 lerps = frac( texelPos );

	float pixelOffset = ( 1.0f / shadowTextureSize ) * .99f;

	float4 depths;
	depths.x = tex2D( shadowMap, shadowUVScaled.xy ).r;
	depths.y = tex2D( shadowMap, shadowUVScaled.xy + float2(pixelOffset, 0) ).r;
	depths.z = tex2D( shadowMap, shadowUVScaled.xy + float2(0, pixelOffset) ).r;
	depths.w = tex2D( shadowMap, shadowUVScaled.xy + float2(pixelOffset, pixelOffset) ).r;

	float4 depthFlags = step( depths, compareDepth );

	return (half)lerp( 
		lerp( depthFlags.x, depthFlags.y, lerps.x ),
		lerp( depthFlags.z, depthFlags.w, lerps.x ),
		lerps.y );

#endif

}

half getShadowValuePCF8TapFixedDisk4x(sampler2D shadowMap, 
	float4 shadowUV, float lightShadowFarClipDistance, float shadowTextureSize)
{
	float compareDepth = shadowUV.z / lightShadowFarClipDistance;
	float2 shadowUVScaled = shadowUV.xy / shadowUV.w;

	const float scale = 2.0f / shadowTextureSize;

	const float2 poisson[8] =
	{
		float2(     0,      0),
		float2( -0.18, -0.816),
		float2(-0.126,    0.8),
		float2(-0.854, -0.166),
		float2( 0.856,  -0.13),
		float2(-0.394,  0.032),
		float2( 0.178,   0.33),
		float2( 0.186, -0.324),
	};

#if defined(ATI_HARDWARE_SHADOWS)

	//8 tap filter + fetch4

	half shadow = 0;
	for(int n = 0; n < 8; n++)
	{
		float2 texCoord = shadowUVScaled.xy + poisson[n] * scale;

		float2 lerps = frac(texCoord * shadowTextureSize);

		float4 depths = tex2D(shadowMap, texCoord);
		float4 depthFlags = step(depths, compareDepth);

		shadow += lerp(
			lerp(depthFlags[3], depthFlags[0], lerps.x), 
			lerp(depthFlags[1], depthFlags[2], lerps.x), 
			lerps.y);

	}
	return shadow / 8;
	
#elif defined(NVIDIA_HARDWARE_SHADOWS)

	//8 tap filter + nvidia hardware pcf

	half shadow = 0;
	for(int n = 0; n < 8; n++)
	{
		float4 texCoord = shadowUV;
		texCoord.xy += poisson[n] * ( scale * shadowUV.w );
		
		shadow += tex2Dproj( shadowMap, texCoord ).r;
	}
	return 1.0h - shadow / 8;

#else

	//8 tap filter

	half shadow = 0;
	for(int n = 0; n < 8; n++)
	{
		float2 texCoord = shadowUVScaled.xy + poisson[n] * scale;

		float depth = tex2D( shadowMap, texCoord ).r;
		float depthFlag = step( depth, compareDepth );
		
		shadow += (half)depthFlag;
	}
	return shadow / 8;

#endif

}

#endif //LIGHTTYPE_DIRECTIONAL || LIGHTTYPE_SPOT

///////////////////////////////////////////////////////////////////////////////////////////////////
//Point light
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef LIGHTTYPE_POINT

/*
half getShadowValueForPointLight1x1(samplerCUBE shadowMap,
	float lightShadowFarClipDistance, float shadowTextureSize, float3 worldPosition, float3 lightPosition)
{
	//don't forget about flipped cubemaps. conversion already done in the vertex shader.
	float depth = texCUBE(shadowMap, shadowUV.xyz).r;
	float compareDepth = shadowUV.w / lightShadowFarClipDistance;
	float depthFlag = step( depth, compareDepth );
	return (half)depthFlag;
}
*/

half getShadowValueForPointLight2x2(samplerCUBE shadowMap,
	float lightShadowFarClipDistance, float shadowTextureSize, float3 worldPosition, float3 lightPosition)
{
	float3 diff = worldPosition - lightPosition;
	float3 ray = normalize(diff);
	float distance = length(diff);
	float3 absRay = abs(ray);

	float3 planeNormal;
	bool planeX = false;
	bool planeY = false;
	bool planeZ = false;

	if(absRay.x > absRay.y && absRay.x > absRay.z)
	{
		planeX = true;
		if(ray.x > 0)
			planeNormal = float3(1, 0, 0);
		else
			planeNormal = float3(-1, 0, 0);
	}
	else if(absRay.y > absRay.z)
	{
		planeY = true;
		if(ray.y > 0)
			planeNormal = float3(0, 1, 0);
		else
			planeNormal = float3(0, -1, 0);
	}
	else
	{
		planeZ = true;
		if(ray.z > 0)
			planeNormal = float3(0, 0, 1);
		else
			planeNormal = float3(0, 0, -1);
	}

	//detecting plane intersection point
	float fraction = .5f / dot( planeNormal.rgb, ray );
	float3 intersectionPoint = ray * fraction;

	float3 texPos = intersectionPoint * shadowTextureSize;

	//determine the lerp amounts
	float2 lerps;
	{
		float2 v;
		if(planeX)
			v = texPos.yz;
		else if(planeY)
			v = texPos.xz;
		else
			v = texPos.xy;
		lerps = frac(v);
	}

	//float pixelOffset = 1;

	float compareDepth = distance / lightShadowFarClipDistance;

	float3 offset1, offset2;
	if(planeX)
	{
		offset1 = float3(0, 1, 0);
		offset2 = float3(0, 0, 1);
	}
	else if(planeY)
	{
		offset1 = float3(1, 0, 0);
		offset2 = float3(0, 0, 1);
	}
	else
	{
		offset1 = float3(1, 0, 0);
		offset2 = float3(0, 1, 0);
	}

	float4 depths;
	depths.x = texCUBE( shadowMap, fixFlippedCubemapCoords( texPos ) ).r;
	depths.y = texCUBE( shadowMap, fixFlippedCubemapCoords( texPos + offset1 ) ).r;
	depths.z = texCUBE( shadowMap, fixFlippedCubemapCoords( texPos + offset2 ) ).r;
	depths.w = texCUBE( shadowMap, fixFlippedCubemapCoords( texPos + offset1 + offset2 ) ).r;

	float4 depthFlags = step( depths, compareDepth );

	return lerp( 
		lerp( depthFlags.x, depthFlags.y, lerps.x ),
		lerp( depthFlags.z, depthFlags.w, lerps.x ),
		lerps.y );
}

half getShadowValueForPointLightPoisson8(samplerCUBE shadowMap, 
	float lightShadowFarClipDistance, float shadowTextureSize, float3 worldPosition, float3 lightPosition)
{
	float3 diff = worldPosition - lightPosition;
	float3 ray = normalize(diff);
	float distance = length(diff);
	float3 absRay = abs(ray);

	float3 planeNormal;
	bool planeX = false;
	bool planeY = false;
	bool planeZ = false;

	if(absRay.x > absRay.y && absRay.x > absRay.z)
	{
		planeX = true;
		if(ray.x > 0)
			planeNormal = float3(1, 0, 0);
		else
			planeNormal = float3(-1, 0, 0);
	}
	else if(absRay.y > absRay.z)
	{
		planeY = true;
		if(ray.y > 0)
			planeNormal = float3(0, 1, 0);
		else
			planeNormal = float3(0, -1, 0);
	}
	else
	{
		planeZ = true;
		if(ray.z > 0)
			planeNormal = float3(0, 0, 1);
		else
			planeNormal = float3(0, 0, -1);
	}
	
	//detecting plane intersection point
	float fraction = .5f / dot( planeNormal.rgb, ray );
	float3 intersectionPoint = ray * fraction;

	float3 texPos = intersectionPoint * shadowTextureSize;

	const float scale = 1.5;// = scale / shadowTextureSize;

	const float2 poisson[8] =
	{
		float2(     0,      0),
		float2( -0.18, -0.816),
		float2(-0.126,    0.8),
		float2(-0.854, -0.166),
		float2( 0.856,  -0.13),
		float2(-0.394,  0.032),
		float2( 0.178,   0.33),
		float2( 0.186, -0.324),
	};

	//8 tap filter

	float compareDepth = distance / lightShadowFarClipDistance;

	half shadow = 0;
	for(int n = 0; n < 8; n++)
	{
		float2 offset2 = poisson[n] * scale;

		float3 offset;
		if(planeX)
			offset = float3(0, offset2.x, offset2.y);
		else if(planeY)
			offset = float3(offset2.x, 0, offset2.y);
		else
			offset = float3(offset2.x, offset2.y, 0);

		float3 texCoord = texPos + offset;
		
		float depth = texCUBE( shadowMap, fixFlippedCubemapCoords( texCoord ) ).r;
		float depthFlag = step( depth, compareDepth );
		
		shadow += depthFlag;
	}
	return shadow / 8;
}

half getShadowValueForPointLightPoisson16(samplerCUBE shadowMap,
	float lightShadowFarClipDistance, float shadowTextureSize, float3 worldPosition, float3 lightPosition)
{
	float3 diff = worldPosition - lightPosition;
	float3 ray = normalize(diff);
	float distance = length(diff);
	float3 absRay = abs(ray);

	float3 planeNormal;
	bool planeX = false;
	bool planeY = false;
	bool planeZ = false;

	if(absRay.x > absRay.y && absRay.x > absRay.z)
	{
		planeX = true;
		if(ray.x > 0)
			planeNormal = float3(1, 0, 0);
		else
			planeNormal = float3(-1, 0, 0);
	}
	else if(absRay.y > absRay.z)
	{
		planeY = true;
		if(ray.y > 0)
			planeNormal = float3(0, 1, 0);
		else
			planeNormal = float3(0, -1, 0);
	}
	else
	{
		planeZ = true;
		if(ray.z > 0)
			planeNormal = float3(0, 0, 1);
		else
			planeNormal = float3(0, 0, -1);
	}
	
	//detecting plane intersection point
	float fraction = .5f / dot( planeNormal.rgb, ray );
	float3 intersectionPoint = ray * fraction;

	float3 texPos = intersectionPoint * shadowTextureSize;

	const float scale = 1.5;// = scale / shadowTextureSize;

	const float2 poisson[16] =
	{
		float2(     0,      0),
		float2(-0.488, -0.748),
		float2( 0.704,   0.55),
		float2(-0.916, -0.002),
		float2( 0.724, -0.526),
		float2( -0.62, -0.336),
		float2( 0.114,  0.668),
		float2( 0.116, -0.694), 
		float2(-0.568,   0.41),
		float2(  0.69, -0.008),
		float2(-0.324,  0.866), 
		float2(-0.116, -0.308), 
		float2( 0.304,   0.31),
		float2(-0.432, -0.008),
		float2( 0.328,   -0.2),
		float2(-0.118,  0.376),
	};

	//16 tap filter

	float compareDepth = distance / lightShadowFarClipDistance;

	half shadow = 0;
	for(int n = 0; n < 16; n++)
	{
		float2 offset2 = poisson[n] * scale;

		float3 offset;
		if(planeX)
			offset = float3(0, offset2.x, offset2.y);
		else if(planeY)
			offset = float3(offset2.x, 0, offset2.y);
		else
			offset = float3(offset2.x, offset2.y, 0);

		float3 texCoord = texPos + offset;
	
		float depth = texCUBE( shadowMap, fixFlippedCubemapCoords( texCoord ) ).r;
		float depthFlag = step( depth, compareDepth );
		
		shadow += depthFlag;
	}
	return shadow / 16;
}

#endif //LIGHTTYPE_POINT

///////////////////////////////////////////////////////////////////////////////////////////////////
//getShadowmapReceiveValue
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifdef LIGHTTYPE_POINT
	half getShadowmapReceiveValue(samplerCUBE shadowMap0, float cameraDistance, 
		half lightCastShadows, float lightShadowFarClipDistance, half3 shadowFarDistance, 
		float3 shadowTextureSizes, half shadowColorIntensity, float3 worldPosition, float3 lightPosition)
#else
	#ifdef SHADOW_PSSM
		half getShadowmapReceiveValue(float4 shadowUV0, float4 shadowUV1, float4 shadowUV2, 
			sampler2D shadowMap0, sampler2D shadowMap1, sampler2D shadowMap2, float cameraDistance, 
			half lightCastShadows, float lightShadowFarClipDistance, half3 shadowFarDistance, 
			float3 shadowTextureSizes, half shadowColorIntensity, 
			float4 shadowDirectionalLightSplitDistances, float pssmDistance, half drawShadowDebugging )
	#else
		half getShadowmapReceiveValue(float4 shadowUV0, sampler2D shadowMap0, float cameraDistance, 
			half lightCastShadows, float lightShadowFarClipDistance, half3 shadowFarDistance, 
			float3 shadowTextureSizes, half shadowColorIntensity)
	#endif
#endif

{
	//float3 shadowFarDistance:
	//x: far distance
	//y: shadowFarDistance - shadowFadeMinDistance * 2
	//z: 1 / (shadowFarDistance - shadowFadeMinDistance)

	float shadowTextureSize;
	#ifdef LIGHTTYPE_DIRECTIONAL
		shadowTextureSize = shadowTextureSizes.y;
	#endif
	#ifdef LIGHTTYPE_SPOT
		shadowTextureSize = shadowTextureSizes.z;
	#endif
	#ifdef LIGHTTYPE_POINT
		shadowTextureSize = shadowTextureSizes.x;
	#endif

	half final;

	#ifdef SHADOW_MAP_LOW
	{
		#ifdef LIGHTTYPE_POINT
			final = getShadowValueForPointLight2x2(shadowMap0, lightShadowFarClipDistance, shadowTextureSize, worldPosition, lightPosition);
		#else
			#ifdef SHADOW_PSSM
				if(pssmDistance < shadowDirectionalLightSplitDistances.y)
					final = getShadowValueSimple(shadowMap0, shadowUV0, lightShadowFarClipDistance, shadowTextureSize);
				else if(pssmDistance < shadowDirectionalLightSplitDistances.z)
					final = getShadowValueSimple(shadowMap1, shadowUV1, lightShadowFarClipDistance, shadowTextureSize);
				else
					final = getShadowValueSimple(shadowMap2, shadowUV2, lightShadowFarClipDistance, shadowTextureSize);
			#else
				final = getShadowValueSimple(shadowMap0, shadowUV0, lightShadowFarClipDistance,
					shadowTextureSize);
			#endif
		#endif
	}
	#endif

	#ifdef SHADOW_MAP_MEDIUM
	{
		#ifdef LIGHTTYPE_POINT
			final = getShadowValueForPointLightPoisson8(shadowMap0, lightShadowFarClipDistance, shadowTextureSize, worldPosition, lightPosition);
		#else
			#ifdef SHADOW_PSSM
				if(pssmDistance < shadowDirectionalLightSplitDistances.y)
					final = getShadowValuePCF4x4(shadowMap0, shadowUV0, lightShadowFarClipDistance, shadowTextureSize);
				else if(pssmDistance < shadowDirectionalLightSplitDistances.z)
					final = getShadowValueSimple(shadowMap1, shadowUV1, lightShadowFarClipDistance, shadowTextureSize);
				else
					final = getShadowValueSimple(shadowMap2, shadowUV2, lightShadowFarClipDistance, shadowTextureSize);
			#else
				final = getShadowValuePCF4x4(shadowMap0, shadowUV0, lightShadowFarClipDistance, shadowTextureSize);
			#endif
		#endif
	}
	#endif

	#ifdef SHADOW_MAP_HIGH
	{
		#ifdef LIGHTTYPE_POINT
			final = getShadowValueForPointLightPoisson16(shadowMap0, lightShadowFarClipDistance, shadowTextureSize, worldPosition, lightPosition);
		#else
			#ifdef SHADOW_PSSM
				if(pssmDistance < shadowDirectionalLightSplitDistances.y)
					final = getShadowValuePCF8TapFixedDisk4x(shadowMap0, shadowUV0, lightShadowFarClipDistance, shadowTextureSize);
				else if(pssmDistance < shadowDirectionalLightSplitDistances.z)
					final = getShadowValuePCF4x4(shadowMap1, shadowUV1, lightShadowFarClipDistance, shadowTextureSize);
				else
					final = getShadowValueSimple(shadowMap2, shadowUV2, lightShadowFarClipDistance, shadowTextureSize);
			#else
				final = getShadowValuePCF8TapFixedDisk4x(shadowMap0, shadowUV0, lightShadowFarClipDistance, shadowTextureSize);
			#endif			
		#endif
	}
	#endif

	//for drawShadowDebugging mode. PSSM.
	#ifdef SHADOW_PSSM
	if(drawShadowDebugging > 0)
	{
		if(pssmDistance < shadowDirectionalLightSplitDistances.y)
			final += .8f;
		else if(pssmDistance < shadowDirectionalLightSplitDistances.z)
			final += .6f;
		else
			final += .3f;
	}
	#endif

	//shadow intensity
	final = 1 - final * shadowColorIntensity;

	//fading by distance
	final += (half)saturate( ( (half)cameraDistance + shadowFarDistance.y ) * shadowFarDistance.z );
	if(final > 1)
		final = 1;

	//check light cast shadows flag
	if(lightCastShadows < 0)
		final = 1;

	return final;
}
