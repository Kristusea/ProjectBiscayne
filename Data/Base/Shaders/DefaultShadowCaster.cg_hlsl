// Copyright (C) NeoAxis Group Ltd. This is part of NeoAxis 3D Engine SDK.

void main_vp(
	uniform float4x4 worldMatrix, //instancing specific: initialized from instance data.
	uniform float4x4 viewProjMatrix,
	uniform float4 texelOffsets,
	uniform float3 cameraPosition,

#ifdef INSTANCING
	uniform float instancing,
	//hardware instancing. instance data
	float4 instancingWorldMatrix0 : TEXCOORD5,
	float4 instancingWorldMatrix1 : TEXCOORD6,
	float4 instancingWorldMatrix2 : TEXCOORD7,
#endif

	float4 position : POSITION,

	#ifdef LIGHTTYPE_POINT
		out float3 oWorldPosition : TEXCOORD0,
	#else
		out float2 oDepth : TEXCOORD0,
	#endif

	out float4 oPosition : POSITION
	)
{
#ifdef INSTANCING
	//hardware instancing
	if(instancing > 0)
	{
		worldMatrix = float4x4(
			instancingWorldMatrix0,
			instancingWorldMatrix1,
			instancingWorldMatrix2,
			float4(0,0,0,1));
	}
#endif

	float4 worldPosition = mul(worldMatrix, position);
	oPosition = mul(viewProjMatrix, worldPosition);
	oPosition.xy += texelOffsets.zw * oPosition.w;

	#ifdef LIGHTTYPE_POINT
		oWorldPosition = worldPosition;
	#else
		oDepth = float2(oPosition.z, oPosition.w);
	#endif
}

void main_fp(
	uniform float farClipDistance,
	uniform float2 shadowDirectionalLightBias,
	uniform float2 shadowSpotLightBias,
	uniform float2 shadowPointLightBias,
	uniform float3 cameraPosition,

	#ifdef LIGHTTYPE_POINT
		float3 worldPosition : TEXCOORD0,
	#else
		float2 depth : TEXCOORD0,
	#endif

#if defined(ATI_HARDWARE_SHADOWS) || defined(NVIDIA_HARDWARE_SHADOWS)
	out float oDepth : DEPTH,
#endif
	out float4 oColor : COLOR )
{
	#ifdef LIGHTTYPE_POINT
		float2 depth = float2(length(worldPosition - cameraPosition), 0);
	#endif

	//bias
	float2 bias;
	#ifdef LIGHTTYPE_DIRECTIONAL
		bias = shadowDirectionalLightBias,
	#endif
	#ifdef LIGHTTYPE_SPOT
		bias = shadowSpotLightBias,
	#endif
	#ifdef LIGHTTYPE_POINT
		bias = shadowPointLightBias,
	#endif

	#ifdef NVIDIA_HARDWARE_SHADOWS
		depth.x += bias.x + bias.y * fwidth(depth.x);
	#elif defined(ATI_HARDWARE_SHADOWS)
		depth.x += bias.x + bias.y * fwidth(depth.x);
	#else
		#if defined(DIRECT3D)
			depth.x += bias.x + bias.y * fwidth(depth.x);
		#else
			depth.x += bias.x;
		#endif
	#endif

	//oColor, oDepth
#ifdef NVIDIA_HARDWARE_SHADOWS
	oColor = float4(0, 0, 0, 1);
	oDepth = depth.x / depth.y;
#elif defined(ATI_HARDWARE_SHADOWS)
	float normalizedDepth = depth.x / farClipDistance;
	oColor = float4(normalizedDepth, 0, 0, 1);
	oDepth = normalizedDepth;
#else
	float normalizedDepth = depth.x / farClipDistance;
	oColor = float4(normalizedDepth, 0, 0, 1);
#endif

}
