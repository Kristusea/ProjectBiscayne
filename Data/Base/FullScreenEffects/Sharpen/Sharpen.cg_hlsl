float4 main_fp(
	uniform float4 viewportSize,
	uniform float sharp_strength,
	uniform float sharp_clamp,
	uniform float offset_bias,
	float2 texCoord : TEXCOORD0,
	sampler2D rt : register(s0)
) : COLOR
{
	// -- Get the original pixel --
	float3 ori = tex2D(rt, texCoord).rgb;       // ori = original pixel

	float3 coef_luma = float3(0.2126, 0.7152, 0.0722);      // BT.709 & sRBG luma coefficient (Monitors and HD Television)
	//float3 coef_luma = float3(0.299, 0.587, 0.114);       // BT.601 luma coefficient (SD Television)
	//float3 coef_luma = float3(1.0/3.0, 1.0/3.0, 1.0/3.0); // Equal weight coefficient

	float3 sharp_strength_luma = coef_luma * sharp_strength;

	// -- Gaussian filter --
	//   [ .25, .50, .25]     [ 1 , 2 , 1 ]
	//   [ .50,   1, .50]  =  [ 2 , 4 , 2 ]
 	//   [ .25, .50, .25]     [ 1 , 2 , 1 ]

	float px = viewportSize.z;
	float py = viewportSize.w;

    float3 blur_ori = tex2D(rt, texCoord + float2(px,-py) * 0.5 * offset_bias).rgb; // South East
    blur_ori += tex2D(rt, texCoord + float2(-px,-py) * 0.5 * offset_bias).rgb;  // South West    
    blur_ori += tex2D(rt, texCoord + float2(px,py) * 0.5 * offset_bias).rgb; // North East
    blur_ori += tex2D(rt, texCoord + float2(-px,py) * 0.5 * offset_bias).rgb; // North West

    blur_ori *= 0.25;  // ( /= 4) Divide by the number of texture fetches


	/*-----------------------------------------------------------.   
	/                            Sharpen                          /
	'-----------------------------------------------------------*/

	// -- Calculate the sharpening --  
	float3 sharp = ori - blur_ori;  //Subtracting the blurred image from the original image

	// -- Adjust strength of the sharpening --
	float sharp_luma = dot(sharp, sharp_strength_luma); //Calculate the luma and adjust the strength

	// -- Clamping the maximum amount of sharpening to prevent halo artifacts --
	sharp_luma = clamp(sharp_luma, -sharp_clamp, sharp_clamp);  //TODO Try a curve function instead of a clamp

	// -- Combining the values to get the final sharpened pixel	--
	float4 done = float4(ori + sharp_luma, 1);    // Add the sharpening to the original.
	//float4 done = inputcolor + sharp_luma;    // Add the sharpening to the input color.

	// I have a feeling I might use a lerp somewhere in here to calculate the sharpened pixel slightly faster - will look into it later.

	/*-----------------------------------------------------------.   
	/                     Returning the output                    /
	'-----------------------------------------------------------*/
	//#if show_sharpen == 1
	//  //float3 chroma = ori - luma;
	//  //done = abs(sharp * 4).rrr;
	//  done = saturate(0.5 + (sharp_luma * 4)).rrrr;
	//#endif

	return saturate(done);
}
